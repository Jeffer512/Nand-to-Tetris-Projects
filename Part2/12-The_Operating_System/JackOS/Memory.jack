// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static array ram, heap;
    static int freelist;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let freelist = 2048;
        let heap[0] = 0;
        let heap[1] = 14334;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int address, next_address;
        let address = freelist;
        let next_address = freelist;
        if (size = 0) {
            return freelist;
        } 
        while ((ram[next_address+1] < (size - 1)) & ~(ram[next_address] = 0)) {
            let address = next_address;
            let next_address = ram[address];
        }
        if ((ram[next_address+1] < (size - 1)) & (ram[next_address] = 0)) {
            do Sys.error(5);
            return 0;
        }
        if ((next_address + size + 1) > 16381) {
            let ram[address] = 0;
            let size = ram[next_address + 1] + 2;
        }
        else {
            if ((ram[next_address + 1] - size - 1) < 1) {
                if (next_address = freelist) {
                    let freelist = ram[freelist];
                }
                let ram[address] = ram[next_address];
                let size = ram[next_address + 1] + 2;
            }
            else {
                let ram[next_address + size + 1] = ram[next_address];
                let ram[next_address + size + 2] = ram[next_address + 1] - size - 1;
                let ram[address] = ram[address] + size + 1;
                if (next_address = freelist) {
                    let freelist = freelist + size + 1;
                }
            }
        }
        let ram[next_address] = size;
        let ram[next_address + 1] = 0;
        return next_address + 1;
    }


    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var int size;
        let size = o[-1];
        let o[-1] = freelist;
        let o[0] = size - 1;
        let freelist = o - 1;
        return;
    }    
}
